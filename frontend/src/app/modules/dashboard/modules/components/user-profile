import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { UserService } from '../../../../../services/users/user.service';
import { UserProfile } from '../../../../../models/responses/user-profile';

@Component({
  selector: 'app-user-profile',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './user-profile.component.html',
  styleUrl: './user-profile.component.css'
})
export class UserProfileComponent implements OnInit {
  profile: UserProfile | null = null;
  profileForm!: FormGroup;
  passwordForm!: FormGroup;
  isSaving = false;
  isChangingPassword = false;
  avatarPreview: string | null = null;

  constructor(private userService: UserService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.profileForm = this.fb.group({
      firstName: [''],
      lastName: [''],
      email: ['', [Validators.required, Validators.email]],
      phone: [''],
      company: ['']
    });

    this.passwordForm = this.fb.group({
      currentPassword: ['', Validators.required],
      newPassword: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', Validators.required]
    });

    this.loadProfile();
  }

  loadProfile(): void {
    this.userService.getMe().subscribe(profile => {
      this.profile = profile;
      this.avatarPreview = profile.avatarUrl || null;
      this.profileForm.patchValue({
        firstName: profile.firstName || '',
        lastName: profile.lastName || '',
        email: profile.email || '',
        phone: profile.phone || '',
        company: profile.company || ''
      });
    });
  }

  saveProfile(): void {
    if (this.profileForm.invalid) return;
    this.isSaving = true;
    this.userService.updateMe(this.profileForm.value).subscribe({
      next: (updated) => {
        this.isSaving = false;
        this.profile = updated;
      },
      error: () => (this.isSaving = false)
    });
  }

  uploadAvatar(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) return;
    const file = input.files[0];
    this.userService.uploadAvatar(file).subscribe(updated => {
      this.profile = updated;
      this.avatarPreview = updated.avatarUrl || null;
    });
  }

  changePassword(): void {
    if (this.passwordForm.invalid) return;
    const { currentPassword, newPassword, confirmPassword } = this.passwordForm.value;
    if (newPassword !== confirmPassword) return;
    this.isChangingPassword = true;
    this.userService.changePassword({ currentPassword, newPassword }).subscribe({
      next: () => {
        this.isChangingPassword = false;
        this.passwordForm.reset();
      },
      error: () => (this.isChangingPassword = false)
    });
  }
}


